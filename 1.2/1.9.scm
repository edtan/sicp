#lang racket
; Exercise 1.9.  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc,
; which increments its argument by 1, and dec, which decrements its argument by 1.

(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

; Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5).
; Are these processes iterative or recursive?

; For the first method:
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
; Because there are deferred operators (i.e. the first argument essentially gets transformed into a sum of inc calls),
; this is a linear recursive process.

; For the second method:
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
; Because the state is captured in each method call, this is a linear iterative process.

; In trying to generalize a way to distinguish between iterative and recursive processes, based on the applicative-order substitution model,
; it seems like if the recursive procedure name ends up being called as an operator, the process will end up as a linear (iterative) process, whereas
; if the procedure name ends up being evaluated as one of the operands, the process will end up being a recursive process.  This is
; because the applicative order substition model of evaluation attempts to evaluate all sub-expressions first.  Thus, in the case where
; the same procedure name appears as one of operands, the interpreter will try to evaluate the operands, meaning it will unroll the recursive
; process.  In the case where the procedure name is one of the operators, it will evaluate the operands first, then substitute in the operands
; into the formal parameters of the operator (i.e. itself).